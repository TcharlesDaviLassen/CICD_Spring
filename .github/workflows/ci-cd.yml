name: CI/CD - Spring Boot com Docker

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Construir e rodar testes
        run: |
          chmod +x mvnw
          ./mvnw clean package

      - name: Listar arquivos gerados
        run: ls -l target/

      - name: Armazenar artefato
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar


  # Deploy de desenvolvimento para fazer a validação de pode ir para a branch de desenvolvimento com a permissão do revisor
  deploy-development:
    runs-on: ubunto-latest
    needs: build-and-test
    environment:
      name: development
#      url: https://github.com/TcharlesDaviLassen/CICD_Spring

  build-docker:
    runs-on: ubuntu-latest
    needs: deploy-development
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Baixar artefato gerado no build
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Verificar arquivos baixados
        run: ls -l target/

      - name: Construir imagem Docker
        run: docker build -t cicd:${{ github.sha }} .

      - name: Rodar container Docker
        run: |
          docker run -d -p 8080:8080 --name cicd-container cicd:${{ github.sha }}

      - name: Aguardar inicialização do container
        run: sleep 20

      - name: Verificar se o container está rodando
        run: docker ps -a

      - name: Verificar logs do container
        run: docker logs cicd-container | tee logs.txt

      - name: Upload logs como artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: logs.txt

      - name: Testar aplicação rodando no container
        run: |
          curl -I http://localhost:8080 || (echo "Aplicação não está respondendo" && exit 1)

  expose-ngrok:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Instalar ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok -y

      - name: Configurar ngrok
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Iniciar ngrok
        run: nohup ngrok http 8080 > ngrok.log 2>&1 &

      - name: Aguardar ngrok iniciar
        run: sleep 20

      - name: Exibir URL pública do ngrok
        run: curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' || (echo "Erro ao obter URL do ngrok" && exit 1)

      - name: Verificar se a aplicação está rodando
        run: curl -I http://localhost:8080 || (echo "Aplicação não está respondendo" && exit 1)

#
#

#name: CI/CD - Spring Boot com Docker
#
#on:
#  push:
#    branches:
#      - develop
#      - main
#  pull_request:
#        branches: [main]
#
#  workflow_dispatch:
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
#      - name: Configurar JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'maven'
#
#      - name: Construir e rodar testes
#        run: |
#          chmod +x mvnw
#          ./mvnw clean package
#
#      - name: Listar arquivos gerados
#        run: ls -l target/
#
#      - name: Armazenar artefato
#        uses: actions/upload-artifact@v4
#        with:
#          name: app-jar
#          path: target/*.jar
#
#  build-docker:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
#      - name: Baixar artefato
#        uses: actions/download-artifact@v4
#        with:
#          name: app-jar
#          path: target/
#
#      - name: Verificar arquivos baixados
#        run: ls -l target/
#
#      - name: Construir imagem Docker
#        run: |
#          docker build -t cicd:${{ github.sha }} .
#
#      - name: Rodar container Docker
#        run: |
#          docker run -d -p 8080:8080 --name cicd-container cicd:${{ github.sha }}
#
#      - name: Verificar containers em execução
#        run: docker ps -a
#
#      - name: Verificar logs do container
#        run: docker logs cicd-container
#
#      - name: Salvar logs da aplicação
#        run: docker logs cicd-container > logs.txt
#
#      - name: Upload logs como artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: application-logs
#          path: logs.txt
#
##      - name: Upload logs como artifact
##        uses: actions/download-artifact@v4
##        with:
##          name: application-logs
##          path: logs.txt
#
#      - name: Testar aplicação rodando no container
#        run: |
#          sleep 10
#          curl -I http://localhost:8080
#
#
#  aplicacao-rodando-container-ngrok:
#    runs-on: ubuntu-latest
#    needs: build-docker
#    steps:
#      - name: Expor aplicação com ngrok
#        run: |
#          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
#          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
#          sudo apt update && sudo apt install ngrok
#          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
#          nohup ngrok http 8080 > /dev/null 2>&1 &
#
#      - name: Esperar 20 segundos para o ngrok configurar
#        run: sleep 20  # Dar tempo para o ngrok configurar o túnel
#
#      - name: Exibir URL pública do ngrok
#        run: |
#          curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'

#
#



#name: CI/CD - Spring Boot com Docker
#
#on:
#  push:
#    branches:
#      - develop
#      - main
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
#      - name: Configurar JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'maven'
#
#      - name: Construir e rodar testes
#        run: |
#          chmod +x mvnw
#          ./mvnw clean package
#
#      - name: Listar arquivos gerados
#        run: ls -l target/
#
#      - name: Armazenar artefato
#        uses: actions/upload-artifact@v4
#        with:
#          name: app-jar
#          path: target/*.jar
#
#  build-docker:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
##      - name: Esperar 20 segundos antes de baixar o artefato
##        run: sleep 20
#
#      - name: Baixar artefato
#        uses: actions/download-artifact@v4
#        with:
#          name: app-jar
#          path: target/
#
#      - name: Verificar arquivos baixados
#        run: ls -l target/
#
#      - name: Construir imagem Docker
#        run: |
#          docker build -t cicd:${{ github.sha }} .
#
#      - name: Rodar container Docker
#        run: |
#          docker run -d -p 8080:8080 --name cicd-container cicd:${{ github.sha }}
#
#      - name: Verificar containers em execução
#        run: docker ps -a
#
#      - name: Verificar logs do container
#        run: docker logs cicd-container
#
#      - name: Salvar logs da aplicação
#        run: docker logs cicd-container > logs.txt
#
#      - name: Upload logs como artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: container-logs
#          path: ./logs.txt
#
#      - name: Testar aplicação rodando no container
#        run: |
#          sleep 10
#          curl -I http://localhost:8080
#
#
#  aplicacao-rodando-container-ngrok:
#    runs-on: ubuntu-latest
#    needs: build-docker
#    steps:
#      - name: Expor aplicação com ngrok
#        run: |
#          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
#          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
#          sudo apt update && sudo apt install ngrok
#          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
#          nohup ngrok http 8080 > /dev/null 2>&1 &
#
#      - name: Exibir URL pública do ngrok
#        run: curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'
#
#      - name: Esperar 20 segundos antes de baixar o artefato
#        run: sleep 20
#
#      - name: Upload logs como artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: application-logs
#          path: logs.txt
#
#

