name: CI/CD - Spring Boot com Docker

on:
  push:
    branches:
      - develop
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Construir e rodar testes
        run: |
          chmod +x mvnw
          ./mvnw clean package

      - name: Listar arquivos gerados
        run: ls -l target/

      - name: Armazenar artefato
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Esperar 10 segundos antes de baixar o artefato
        run: sleep 10

      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Verificar arquivos baixados
        run: ls -l target/

      - name: Construir imagem Docker
        run: |
          docker build -t cicd:${{ github.sha }} .

      - name: Rodar container Docker
        run: |
          docker run -d -p 8080:8080 --name cicd-container cicd:${{ github.sha }}

      - name: Verificar containers em execução
        run: docker ps -a

      - name: Verificar logs do container
        run: docker logs cicd-container

  teste-aplicacao-rodando-container-ngrok:
    runs-on: ubuntu-latest
#    needs: build-and-test
    steps:
      - name: Esperar 20 segundos antes de baixar o artefato
        run: sleep 20

      - name: Expor aplicação com ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok http 8080 > /dev/null 2>&1 &

      - name: Exibir URL pública do ngrok
        run: curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'

      - name: Salvar logs da aplicação
        run: docker logs cicd-container > logs.txt

      - name: Upload logs como artifact
        uses: actions/upload-artifact@v5
        with:
          name: application-logs
          path: logs.txt

      - name: Testar aplicação rodando no container
        run: |
          sleep 10
          curl -I http://localhost:8080

#
#

#  build-and-test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
#      - name: Obter nome da branch
#        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
#
#      - name: Configurar JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'maven'
#
##      - name: Construir e rodar testes
##        run: |
##          chmod +x mvnw
##          ./mvnw clean package
#
##      - name: Executar Testes de Carga
##        run: jmeter -n -t jmeter/teste-carga.jmx -l resultado.jtl
##
##      - name: Executar Testes de Segurança
##        run: |
##          docker run -t owasp/zap2docker-stable zap-cli quick-scan -u http://localhost:8080
#
#      - name: Armazenar artefato
#        uses: actions/upload-artifact@v4
#        with:
#          name: app-jar
#          path: target/*.jar
#
#  build-docker:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#      - name: Checkout do código
#        uses: actions/checkout@v4
#
#      - name: Baixar artefato
#        uses: actions/download-artifact@v4
#        with:
#          name: app-jar
#          path: target/
#
#      - name: Criar imagem Docker
#        run: |
#          docker build -t cicd:${{ github.sha }} .
#
#      - name: Rodar container Docker
#        run: |
#          docker run -d -p 8080:8080 cicd:${{ github.sha }}
#
#      - name: Listar containers em execução
#        run: docker ps
#
##      # Opcional: Publicar no Docker Hub
##      - name: Login no Docker Hub
##        uses: docker/login-action@v2
##        with:
##          username: ${{ secrets.DOCKER_USERNAME }}
##          password: ${{ secrets.DOCKER_PASSWORD }}
##
##      - name: Taggear e enviar para o Docker Hub
##        run: |
##          docker tag meu-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/meu-app:${{ github.sha }}
##          docker push ${{ secrets.DOCKER_USERNAME }}/meu-app:${{ github.sha }}
